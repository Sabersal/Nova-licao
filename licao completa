EX 1:


A)
CREATE TABLE nomes (
    nome VARCHAR(50)
);

INSERT INTO nomes (nome) VALUES ('Roberta');
INSERT INTO nomes (nome) VALUES ('Roberto');
INSERT INTO nomes (nome) VALUES ('Maria Clara');
INSERT INTO nomes (nome) VALUES ('João');
B)
UPDATE nomes
SET nome = UPPER(nome);
C)
SELECT nome, LENGTH(nome) AS tamanho
FROM nomes;
D)
UPDATE nomes
SET nome = 
    CASE 
        WHEN nome LIKE 'Roberto' OR nome LIKE 'João' THEN CONCAT('Sr. ', nome)
        WHEN nome LIKE 'Roberta' OR nome LIKE 'Maria Clara' THEN CONCAT('Sra. ', nome)
        ELSE nome
    END;


EX 2:


A)
CREATE TABLE produtos (
    produto VARCHAR(100), -- assume que o nome do produto terá no máximo 100 caracteres
    preco DECIMAL(10, 2), -- assume que o preço do produto terá no máximo 10 dígitos com 2 casas decimais
    quantidade INT
);
B)
INSERT INTO produtos (produto, preco, quantidade)
VALUES ('Produto A', ROUND(25.6789, 2), 10),
       ('Produto B', ROUND(15.99, 2), 5),
       ('Produto C', ROUND(9.12345, 2), 20);
C)
SELECT produto, preco, ABS(quantidade) AS quantidade_absoluta
FROM produtos;
D)
SELECT AVG(preco) AS media_precos
FROM produtos;


EX 3:


A)
CREATE TABLE eventos (
    data_evento DATE
);
B)
INSERT INTO eventos (data_evento) VALUES (NOW());
C)
SELECT DATEDIFF('2023-10-15', '2023-10-09') AS numero_de_dias;
D)
SELECT data_evento, DAYNAME(data_evento) AS nome_dia_semana
FROM eventos;


EX 4:


A)
SELECT produto, quantidade,
       IF(quantidade > 0, 'Em estoque', 'Fora de estoque') AS status_estoque
FROM produtos;
B)
SELECT produto, preco,
    CASE
        WHEN preco < 50 THEN 'Barato'
        WHEN preco >= 50 AND preco < 100 THEN 'Médio'
        ELSE 'Caro'
    END AS categoria_preco
FROM produtos;


EX 5:


A)
CREATE FUNCTION TOTAL_VALOR(preco DECIMAL(10, 2), quantidade INT) 
RETURNS DECIMAL(10, 2)
BEGIN
    DECLARE valor_total DECIMAL(10, 2);
    SET valor_total = preco * quantidade;
    RETURN valor_total;
END;
B)
SELECT produto, preco, quantidade, TOTAL_VALOR(preco, quantidade) AS valor_total
FROM produtos;

EX 6:
A)
SELECT COUNT(*) AS total_produtos
FROM produtos;
B)
SELECT produto, preco
FROM produtos
WHERE preco = (SELECT MAX(preco) FROM produtos);
C)
SELECT produto, preco
FROM produtos
WHERE preco = (SELECT MIN(preco) FROM produtos);
D)
SELECT SUM(IF(estoque > 0, estoque, 0)) AS total_produtos_em_estoque
FROM produtos;

EX 7:
A)
CREATE FUNCTION CalcularFatorial(@numero INT)
RETURNS INT
AS
BEGIN
    IF @numero <= 1
        RETURN 1;
    ELSE
        RETURN @numero * dbo.CalcularFatorial(@numero - 1);
END;
B)
CREATE FUNCTION f_exponencial(@base FLOAT, @expoente INT)
RETURNS FLOAT
AS
BEGIN
    DECLARE @resultado FLOAT;
    SET @resultado = POWER(@base, @expoente);
    RETURN @resultado;
END;
C)
CREATE FUNCTION VerificarPalindromo(@palavra VARCHAR(255))
RETURNS INT
AS
BEGIN
    SET @palavra = REPLACE(@palavra, ' ', '');
    DECLARE @indice INT = 1;
    DECLARE @ePalindromo INT = 1;
    
    WHILE @indice <= @tamanho / 2 AND @ePalindromo = 1
    BEGIN
        IF SUBSTRING(@palavra, @indice, 1) <> SUBSTRING(@palavra, @tamanho - @indice + 1, 1)
            SET @ePalindromo = 0;
        
        SET @indice = @indice + 1;
    END
    
    RETURN @ePalindromo;
END;

























